"use strict";

let BuxlViewPrototype = function BuxlViewPrototype(elements) {
    this.elements = elements;
    this.events = elements.events;
    this.eventfunctions = {};

    if (this.elements.templates) {
        for (let i = 0; i < this.elements.templates.length; i++) {
            let curTemplateName = this.elements.templates[i];
            let templateElement = document.getElementById(curTemplateName);
            jsrender.templates(curTemplateName, templateElement);
        }
    }

    if (this.elements.targetTemplate) {
        let targetTemplate = document.getElementById(this.elements.targetTemplate);
        this.template = jsrender.templates(this.elements.targetTemplate, targetTemplate);
    }
};

BuxlViewPrototype.prototype.registerEventsPerTrigger = function registerEventsPerTrigger(element, f, triggers, addEventListener) {
    for (let j = 0; j < triggers.length; j++) {
        let curEventFunction = f;

        if (addEventListener) element.addEventListener(triggers[j], this.eventfunctions[curEventFunction], true);else element.removeEventListener(triggers[j], this.eventfunctions[curEventFunction], true);
    }
};

BuxlViewPrototype.prototype.registerEvents = function registerEvents(addEventListener) {
    if (!this.events) return;

    for (let i = 0; i < this.events.length; i++) {
        let triggers = this.events[i].triggers.split(' ');

        if (this.events[i].target === "window") {
            this.registerEventsPerTrigger(window, this.events[i].f, triggers, addEventListener);
        } else {
            let elements = document.querySelectorAll(this.events[i].target);
            for (let j = 0; j < elements.length; j++) this.registerEventsPerTrigger(elements[j], this.events[i].f, triggers, addEventListener);
        }
    }
};

BuxlViewPrototype.prototype.render = function render(modelData, registerEvents) {
    let html = jsrender.render[this.elements.targetTemplate](modelData ? modelData : {});

    let targetView = document.getElementById(this.elements.targetView);
    targetView.innerHTML = html;

    if (registerEvents) this.registerEvents(true);
};

BuxlViewPrototype.prototype.routeTo = function routeTo(controllerName, id) {
    if (id) {
        location.hash = "#/" + controllerName + "/" + id;
    } else {
        let evt = new CustomEvent('hiddenroute', { detail: "#/" + controllerName + "/" });
        window.dispatchEvent(evt);
    }
};

BuxlViewPrototype.prototype.linkEventsToController = function linkEventsToController(controller) {
    if (controller && this.events) {
        for (let i = 0; i < this.events.length; i++) {
            let curEventFunction = this.events[i].f;
            let curEventController = controller;
            let eventToTrigger = curEventController.onEvent(curEventFunction);

            if (eventToTrigger) this.eventfunctions[curEventFunction] = eventToTrigger.bind(curEventController);
        }
    }
};
let BuxlFavoritesModel = function BuxlFavoritesModel() {
    this.savedFavorites = [];
    this.unsavedFavorites = [];
    this.trashedFavorites = [];
    this.storageKey = "buxlStoredFavorites";
};

BuxlFavoritesModel.prototype.getFavorites = function getFavorites() {
    return this.savedFavorites;
};

BuxlFavoritesModel.prototype.loadFavorites = function loadFavorites() {
    this.unsavedFavorites = [];
    this.trashedFavorites = [];

    let storedFavoritesJSON = localStorage.getItem(this.storageKey);

    if (storedFavoritesJSON) this.savedFavorites = JSON.parse(storedFavoritesJSON);else this.savedFavorites = [];
};

BuxlFavoritesModel.prototype.saveFavorites = function saveFavorites() {
    localStorage.setItem(this.storageKey, JSON.stringify(this.savedFavorites));
    this.unsavedFavorites = [];
    this.trashedFavorites = [];
};

BuxlFavoritesModel.prototype.mergeUnsavedFavorites = function mergeUnsavedFavorites() {
    this.savedFavorites = this.savedFavorites.concat(this.unsavedFavorites);
    this.unsavedFavorites = [];
    this.trashedFavorites = [];
};

BuxlFavoritesModel.prototype.isFavorite = function isFavorite(gameHash) {
    return this.savedFavorites.indexOf(gameHash) !== -1;
};

BuxlFavoritesModel.prototype.toggleFavorite = function toggleFavorites(gameHash) {
    let toggle = false;
    let index = -1;

    if (this.isFavorite(gameHash)) {
        index = this.savedFavorites.indexOf(gameHash);
        this.savedFavorites.splice(index, 1);

        this.trashedFavorites.unshift(gameHash);
    } else if (this.unsavedFavorites.indexOf(gameHash) !== -1) {
        i = this.unsavedFavorites.indexOf(gameHash);
        this.unsavedFavories.splice(index, 1);

        this.trashedFavorites.unshift(gameHash);
    } else {
        this.unsavedFavorites.unshift(gameHash);
        toggle = true;
    }

    return toggle;
};
let BuxlGameModel = function BuxlGameModel(buxls) {
    this.buxls = buxls;
    this.currentGameHash = -1;
    this.wordLength = -1;
    this.selectedLetters = [];
    this.unsolved = [];
    this.solved = [];
    this.unsolvedHiddenChar = "&ensp;";
    this.unsolvedHiddenChars = "";
    this.latestSolvedPosition = 0;
};

BuxlGameModel.prototype.getBuxls = function getBuxls() {
    return this.buxls;
};

BuxlGameModel.prototype.getBuxlsCount = function getBuxlsCount() {
    return Object.keys(this.buxls).length;
};

BuxlGameModel.prototype.getBuxl = function getBuxl(hash) {
    return this.buxls[hash];
};

BuxlGameModel.prototype.getCurrentBuxl = function getCurrentBuxl() {
    let currentBuxl = this.getBuxl(this.currentGameHash);

    currentBuxl.solved = this.solved;
    currentBuxl.unsolved = this.unsolved;
    currentBuxl.unsolvedHiddenChars = this.unsolvedHiddenChars;
    currentBuxl.latestSolvedPosition = this.latestSolvedPosition;

    return currentBuxl;
};

BuxlGameModel.prototype.getBuxl = function getBuxl(gameHash) {
    let selectedBuxl = this.buxls[gameHash];

    if (!selectedBuxl) return null;

    return {
        gameHash: gameHash,
        front: selectedBuxl.front,
        back: selectedBuxl.back,
        solutions: selectedBuxl.solutions
    };
};

BuxlGameModel.prototype.setCurrentBuxlById = function setCurrentBuxlById(gameHashId) {
    let keys = Object.keys(this.buxls);

    if (!keys[gameHashId]) return this.setCurrentBuxl(null);else return this.setCurrentBuxl(keys[gameHashId]);
};

BuxlGameModel.prototype.setCurrentBuxl = function setCurrentBuxl(gameHash) {

    if (gameHash && !this.buxls[gameHash]) {
        this.selectedLetters = [];
        this.unsolved = [];
        this.solved = [];
        this.latestSolvedPosition = 0;
        return false;
    }

    if (this.currentGameHash !== gameHash) {
        this.selectedLetters = [];
        this.unsolved = [];
        this.solved = [];
        this.latestSolvedPosition = 0;
        this.currentGameHash = gameHash;
        this.wordLength = this.buxls[this.currentGameHash].solutions[0].length;
        this.unsolvedHiddenChars = this.unsolvedHiddenChar.repeat(this.wordLength);
        this.generateUnsolvedList();
    }

    return true;
};

BuxlGameModel.prototype.generateUnsolvedList = function generateUnsovledList() {
    let solutions = this.buxls[this.currentGameHash].solutions;
    let solutionsLength = solutions.length;
    this.unsolved = [];

    for (let i = 0; i < solutionsLength; i++) {
        if (this.solved.indexOf(solutions[i]) === -1) this.unsolved.unshift(solutions[i]);
    }
};

BuxlGameModel.prototype.getUnsolvedCount = function getUnsolvedCount() {
    return this.unsolved.length;
};

BuxlGameModel.prototype.selectedLetterExists = function selectedLetterExists(id) {
    for (let i = 0; i < this.selectedLetters.length; i++) {
        if (this.selectedLetters[i] === id) {
            return true;
        }
    }
};

BuxlGameModel.prototype.setSelectedLetter = function setSelectedLetter(id) {
    let i = 0;
    for (; i < this.selectedLetters.length; i++) {
        if (this.selectedLetters[i] === "_") {
            this.selectedLetters[i] = id;
            return i;
        }
    }

    this.selectedLetters.push(id);

    return i;
};

BuxlGameModel.prototype.getHashesByLetter = function getHashesByLetter(letter) {
    let currentBuxl = this.buxls[this.currentGameHash];
    let res = {};
    let front = false;
    let i = 0;

    for (; i < currentBuxl.front.length; i++) {
        if (currentBuxl.front[i] === letter) {
            res.selectedLetter = "f" + i;
            front = true;
            break;
        }

        if (currentBuxl.back[i] === letter) {
            res.selectedLetter = "b" + i;
            front = false;
            break;
        }
    }

    if (!res.selectedLetter) return null;

    res.oppositeLetter = (front ? "b" : "f") + i;

    return res;
};

BuxlGameModel.prototype.swapSelectedLetter = function swapSelectedLetter(curId, newId) {
    for (let i = 0; i < this.selectedLetters.length; i++) {
        if (this.selectedLetters[i] === curId) {
            this.selectedLetters[i] = newId;
            return;
        }
    }
};

BuxlGameModel.prototype.delSelectedLetter = function delSelectedLetter(id) {
    for (let i = 0; i < this.selectedLetters.length; i++) {
        if (this.selectedLetters[i] === id) {
            this.selectedLetters[i] = "_";
            return true;
        }
    }
};

BuxlGameModel.prototype.delAllSelectedLetters = function delAllSelectedLetters() {
    this.selectedLetters = [];
};

BuxlGameModel.prototype.getSelectedLetters = function getSelectedLetters() {
    let letters = "";

    for (let i = 0; i < this.selectedLetters.length; i++) {

        letters += this.getLetterById(this.selectedLetters[i]);
    }

    return letters;
};

BuxlGameModel.prototype.getLetterById = function getLetterById(id) {
    if (id === "_") return "_";

    let letterType = id.substring(0, 1);
    let letterId = id.substring(1);
    let currentBuxl = this.buxls[this.currentGameHash];

    if (!letterType) return null;else if (letterType === "f") return currentBuxl.front[letterId];else if (letterType === "b") return currentBuxl.back[letterId];

    return null;
};

BuxlGameModel.prototype.getWordLength = function getWordLength() {
    return this.wordLength;
};

BuxlGameModel.prototype.getSolutions = function getSoltuions() {
    return this.buxls[this.currentGameHash].solutions;
};

BuxlGameModel.prototype.addSolved = function addSolved() {
    let selectedLetters = this.getSelectedLetters();
    let latestSolvedPosition = this.solved.indexOf(selectedLetters);

    if (latestSolvedPosition === -1) {
        this.solved.unshift(selectedLetters);
        this.generateUnsolvedList();
        this.latestSolvedPosition = 0;
        return true;
    } else {
        this.latestSolvedPosition = latestSolvedPosition;
        return false;
    }
};
let BuxlListModel = function BuxlListModel(elements) {
    this.buxlGameModel = elements.buxlGameModel;
    this.buxlFavoritesModel = elements.buxlFavoritesModel;
};

BuxlListModel.prototype.getFavoritesList = function getFavoritesList() {
    if (!this.buxlFavoritesModel.savedFavorites) this.buxlFavoritesModel.loadFavorites();

    let savedFavorites = this.buxlFavoritesModel.savedFavorites;
    let trashedFavorites = this.buxlFavoritesModel.trashedFavorites;
    let favedBuxls = [];

    for (let i = 0; i < savedFavorites.length; i++) {
        let buxl = this.buxlGameModel.getBuxl(savedFavorites[i]);
        if (buxl) {
            // Buxl is solved, so put the solution into solved
            buxl.solved = buxl.solutions;
            buxl.isFavorite = true;
            favedBuxls.push(buxl);
        }
    }

    if (favedBuxls.length === 0) {
        favedBuxls.push({
            front: ["K", "E", "I", "N"],
            back: ["B", "U", "X", "L"]
        });
    }

    return favedBuxls;
};
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let BuxlGameView = function BuxlGameView(elements) {
  BuxlViewPrototype.call(this, elements);
};

BuxlGameView.prototype = Object.create(BuxlViewPrototype.prototype);

BuxlGameView.prototype.onLetterClick = function onLetterClick(letterHash) {
  let target = document.querySelector('[data-game-btn-id="' + letterHash + '"]');
  anime({
    targets: target,
    scale: 0.8,
    easing: 'easeInOutQuad',
    direction: 'alternate',
    duration: 100,
    complete: function () {
      target.style = "";
    }
  });
};

BuxlGameView.prototype.setSelectedLetterInactive = function setSelectedLetterInactive(currentLetterHash, oppositeLetterHash) {
  this.onLetterClick(currentLetterHash);
  this.changeButtonByHash(currentLetterHash, "letter-selected", "letter-inactive");
  this.changeButtonByHash(oppositeLetterHash, "letter-notselected", "letter-inactive");
};

BuxlGameView.prototype.setSelectedLetter = function setSelectedLetter(currentLetterHash, oppositeLetterHash) {
  this.onLetterClick(currentLetterHash);
  this.changeButtonByHash(currentLetterHash, "letter-inactive", "letter-selected");
  this.changeButtonByHash(oppositeLetterHash, "letter-inactive", "letter-notselected");
};

BuxlGameView.prototype.swapLetter = function swapLetter(currentLetterHash, newLetterHash) {
  this.onLetterClick(newLetterHash);
  this.changeButtonByHash(currentLetterHash, "letter-selected", "letter-notselected");
  this.changeButtonByHash(newLetterHash, "letter-notselected", "letter-selected");
};

BuxlGameView.prototype.setSelectedLetters = function setSelectedLetters(letters) {
  for (let i = 0; i < letters.length; i++) {
    let selectedSolution = document.querySelector('[data-solution-index="' + i + '"]');
    if (selectedSolution) selectedSolution.innerHTML = letters[i];
  }
};

BuxlGameView.prototype.animateWrongWord = function animateWrongWord(dataModel) {
  this.curDataModel = dataModel;
  let _this = this;

  anime({
    targets: '.letter-solution-mass',
    duration: 1000,
    backgroundColor: '#ff0066',
    easing: 'easeOutBack'
  });

  anime({
    targets: '.gamewrap',
    translateX: ['-.60rem', '.60rem', '-.60rem'],
    duration: 500,
    loop: 2,
    easing: 'linear',
    direction: 'alternate',
    complete: _this.render.bind(_this, dataModel, true)
  });
};

BuxlGameView.prototype.animateSolved = (() => {
  var _ref = _asyncToGenerator(function* (dataModel) {
    anime({
      targets: '.letter-solution-mass',
      duration: 500,
      backgroundColor: '#b2ff33',
      easing: 'easeOutBack'
    });

    yield anime({
      targets: '.letter-selected',
      duration: 200,
      delay: 0,
      opacity: 0.2,
      loop: 5,
      easing: 'linear'
    }).finished;

    this.render(dataModel, true);

    yield anime({
      targets: '.latestsolved',
      scale: 2,
      duration: 400,
      opacity: 0.6,
      direction: 'alternate',
      easing: 'easeInOutQuart'
    }).finished;

    return true;
  });

  function animateSolved(_x) {
    return _ref.apply(this, arguments);
  }

  return animateSolved;
})();

let funcx = function () {
  return anime.random(-40, 40) + 'px';
};
let funcy = function () {
  return anime.random(-40, 40) + 'px';
};

BuxlGameView.prototype.animateGameFinished = (() => {
  var _ref2 = _asyncToGenerator(function* (solvedDataModel, newDataModel) {
    yield this.animateSolved(solvedDataModel);

    let _this = this;

    yield anime({
      targets: '.solutioncloud > span',
      duration: 250,
      scale: 1.3,
      delay: 0,
      opacity: 0.2,
      loop: 5,
      easing: 'linear'
    }).finished;

    yield anime({
      targets: '.letter-mass',
      translateX: [funcx(), funcx()],
      translateY: [funcy(), funcy()],
      scale: [1, 20],
      opacity: [1, 0],
      backgroundColor: '#b2ff33',
      easing: 'easeInOutQuart',
      delay: 0,
      duration: 400
    }).finished;

    this.render(newDataModel, false);

    anime({
      targets: '.letter-mass',
      translateX: ["+=0", 0],
      translateY: ["+=0", 0],
      scale: [20, 1],
      opacity: [0, 1],
      easing: 'easeInOutQuart',
      delay: 0,
      duration: 400,
      complete: function () {
        BuxlViewPrototype.prototype.routeTo.call(_this, "buxl", newDataModel.gameHash);
      }
    });
  });

  function animateGameFinished(_x2, _x3) {
    return _ref2.apply(this, arguments);
  }

  return animateGameFinished;
})();

BuxlGameView.prototype.animateGameReload = function animateGameReload(gameModelData) {
  BuxlViewPrototype.prototype.routeTo.call(this, "buxl", gameModelData.gameHash);
};

BuxlGameView.prototype.animateHint = function animateHint(letterHash) {
  let target = document.querySelector('[data-game-btn-id="' + letterHash + '"]');

  anime({
    targets: target,
    rotate: ['-35', '35', '-35'],
    duration: 350,
    loop: 4,
    easing: 'easeInOutQuart',
    direction: 'alternate',
    complete: function () {
      target.style = "";
    }
  });
};

BuxlGameView.prototype.animateHintError = function animateHintError() {
  let target = document.querySelector('#helpico');
  target.src = "images/buxlsurprisedico.svg";

  anime({
    targets: '.letter-solution-mass',
    duration: 100,
    backgroundColor: '#ff0066',
    easing: 'easeOutBack'
  });

  anime({
    targets: '.gamewrap > div > div > div',
    translateX: ['-.60rem', '.60rem', '-.60rem'],
    duration: 60,
    direction: 'alternate',
    loop: 4,
    easing: 'linear',
    complete: function () {
      target.src = "images/buxlnormalico.svg";
    }
  });
};

BuxlGameView.prototype.changeButtonByHash = function changeButtonByHash(letterHash, currentClass, newClass) {
  anime({
    targets: '.letter-solution-mass',
    duration: 100,
    backgroundColor: '#b7e2f8',
    easing: 'easeOutBack'
  });

  let selectedBtn = document.querySelector('[data-game-btn-id="' + letterHash + '"]');

  if (selectedBtn && selectedBtn.classList.contains(currentClass)) {
    selectedBtn.classList.remove(currentClass);
    selectedBtn.classList.add(newClass);
  }
};
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let BuxlIntroView = function BuxlIntroView(elements) {
    BuxlViewPrototype.call(this, elements);
};

BuxlIntroView.prototype = Object.create(BuxlViewPrototype.prototype);

BuxlIntroView.prototype.animateLogo = (() => {
    var _ref = _asyncToGenerator(function* () {
        let _this = this;

        let buxl = anime.timeline({
            autoplay: true
        });
        // B
        yield buxl.add({
            targets: "#path82",
            translateX: ["-30%", "0%"],
            elasticity: 100
        }) // U 
        .add({
            targets: "#path226",
            translateY: ["200%", "0%"],
            offset: '-=700'
        }) // X
        .add({
            targets: "#path298",
            translateY: ["200%", "0%"],
            offset: '-=900'
        }) // L
        .add({
            targets: "#path154",
            translateX: ["30%", "0%"],
            offset: '-=800'
        }).finished;
    });

    function animateLogo() {
        return _ref.apply(this, arguments);
    }

    return animateLogo;
})();

BuxlIntroView.prototype.render = (() => {
    var _ref2 = _asyncToGenerator(function* (callback, registerEvents) {
        yield this.animateLogo();

        let _this = this;

        let buxl = anime.timeline({
            autoplay: true
        });
        // // svg resize
        buxl.add({
            targets: "svg",
            height: ["100", "13"],
            opacity: ["1", "0"],
            elasticity: 0,
            translateY: ["60%"],
            ease: 'linear',
            complete: function (e) {
                let svgClass = document.querySelector('.buxllogo');
                if (svgClass) svgClass.classList.remove("buxllogo");

                if (callback) callback();
            }
        }) // svg change size from % to px
        .add({
            targets: "svg",
            height: ["0px", "100px"],
            opacity: ["0", "1"],
            translateY: ["0%"],
            elasticity: 0,
            ease: 'linear'
        }) // display footer
        .add({
            targets: 'footer',
            opacity: [0, 1],
            duration: 300,
            begin: function () {
                BuxlViewPrototype.prototype.render.call(_this, null, true);
            }
        });
    });

    function render(_x, _x2) {
        return _ref2.apply(this, arguments);
    }

    return render;
})();
let BuxlListView = function BuxlListView(elements) {
    BuxlViewPrototype.call(this, elements);
};

BuxlListView.prototype = Object.create(BuxlViewPrototype.prototype);
let BuxlNavigationView = function BuxlGameView(elements) {
    BuxlViewPrototype.call(this, elements);
};

BuxlNavigationView.prototype = Object.create(BuxlViewPrototype.prototype);

BuxlNavigationView.prototype.toggleFavorite = function toggleFavorite(dataModel) {
    let _this = this;
    let colorLightBlue = "rgba(183, 226, 248, 0.75)";
    let colorRed = "rgba(255, 0, 102 , 1)";
    let backgroundStart = colorRed;
    let backgroundEnd = colorLightBlue;

    if (dataModel.isFavorite) {
        backgroundStart = colorLightBlue;
        backgroundEnd = colorRed;
    }

    anime({
        targets: '[data-game-hash="' + dataModel.gameHash + '"] .favorite > i',
        scale: [1, 99, 1],
        color: [backgroundStart, backgroundEnd],
        easing: 'easeOutQuad'
    });

    if (dataModel.route == "favorites") {
        let selectedFavorite = document.querySelector('[data-game-hash="' + dataModel.gameHash + '"]');

        if (!selectedFavorite) return;

        if (selectedFavorite.classList.contains("fade-out")) anime({
            targets: selectedFavorite,
            opacity: 1,
            easing: 'easeOutQuad',
            complete: function () {
                selectedFavorite.classList.remove("fade-out");
            }
        });else anime({
            targets: selectedFavorite,
            opacity: 0.3,
            easing: 'easeOutQuad',
            complete: function () {
                selectedFavorite.classList.add("fade-out");
            }
        });
    }
};

BuxlNavigationView.prototype.showSolutions = function showSolutions(gameHash) {
    let selectedFavorite = document.querySelector('[data-game-hash="' + gameHash + '"] > .solutionsbox');

    if (!selectedFavorite) return;

    selectedFavorite.classList.toggle("not-visible");
};

BuxlNavigationView.prototype.goBack = function goBack() {
    window.history.back();
};

BuxlNavigationView.prototype.clearRender = function clearRender() {
    let oldTargetView = document.getElementById(this.elements.targetView);

    if (oldTargetView) oldTargetView.innerHTML = "";
};
let BuxlRoutingView = function BuxlRoutingView(elements) {
    BuxlViewPrototype.call(this, elements);
};

BuxlRoutingView.prototype = Object.create(BuxlViewPrototype.prototype);
let BuxlControllerPrototype = function BuxlControllerPrototype() {
    this.events = [];
};

BuxlControllerPrototype.prototype.onEvent = function onEvent(eventName) {
    let _event = this.events[eventName];

    if (_event) {
        return _event;
    } else {
        console.log("[Warning] Event not found");
        return null;
    }
};

BuxlControllerPrototype.prototype.route = function route(route, gameHash) {};

BuxlControllerPrototype.prototype.init = function init(callback) {
    this.view.linkEventsToController(this);
};

BuxlControllerPrototype.prototype.register = function register(buxlView, buxlModel) {
    this.view = buxlView;
    this.model = buxlModel;
};
let BuxlGameController = function BuxlGameController() {
    BuxlControllerPrototype.call(this);
};

BuxlGameController.prototype = Object.create(BuxlControllerPrototype.prototype);

BuxlGameController.prototype.onKeyPressLetterEvent = function onKeyPressLetterEvent(e) {
    e.stopImmediatePropagation();

    let letter = String.fromCharCode(e.which);

    if (letter.match("\\?")) {
        this.solutionManagerEvent(e);
        return;
    }

    if (!letter.match(/^[a-zA-ZẞßÄÖÜäüö]+$/)) return;

    letter = letter.match(/^ß$/) ? "ẞ" : letter.toUpperCase();

    let letterHashes = this.model.getHashesByLetter(letter);

    if (letterHashes) this.performSelectLetter(letterHashes.selectedLetter, letterHashes.oppositeLetter);
};

BuxlGameController.prototype.onSelectLetterEvent = function onSelectLetterEvent(e) {
    e.stopPropagation();
    e.preventDefault();

    let btnSelected = e.currentTarget;

    let selectedLetterHash = btnSelected.dataset.gameBtnId;
    let selectedLetterType = selectedLetterHash.substring(0, 1);
    let selectedLetterId = selectedLetterHash.substring(1);

    let oppositeLetterHash = (selectedLetterType === "f" ? "b" : "f") + selectedLetterId;

    this.performSelectLetter(selectedLetterHash, oppositeLetterHash);
};

BuxlGameController.prototype.performSelectLetter = function performSelectLetter(currentLetterHash, oppositeLetterHash) {
    if (this.model.selectedLetterExists(currentLetterHash)) {
        this.model.delSelectedLetter(currentLetterHash);
        this.view.setSelectedLetterInactive(currentLetterHash, oppositeLetterHash);
    } else {

        if (this.model.selectedLetterExists(oppositeLetterHash)) {
            this.model.swapSelectedLetter(oppositeLetterHash, currentLetterHash);
            this.view.swapLetter(oppositeLetterHash, currentLetterHash);
        } else {
            this.model.setSelectedLetter(currentLetterHash);
            this.view.setSelectedLetter(currentLetterHash, oppositeLetterHash);
        }
    }

    let selectedLetters = this.model.getSelectedLetters();
    this.view.setSelectedLetters(selectedLetters);

    if (selectedLetters.length === this.model.getWordLength()) {
        let res = this.model.getSolutions().indexOf(selectedLetters);

        if (res !== -1) {
            let newHit = this.model.addSolved();

            if (this.model.getUnsolvedCount() === 0) {
                let solvedModelData = this.model.getCurrentBuxl();
                this.createNewRandomGame();
                this.view.animateGameFinished(solvedModelData, this.model.getCurrentBuxl());
            } else {
                if (newHit) this.view.animateSolved(this.model.getCurrentBuxl());else this.view.animateSolved(this.model.getCurrentBuxl());
            }
        } else {
            this.view.animateWrongWord(this.model.getCurrentBuxl());
        }

        this.model.delAllSelectedLetters();
    }
};

BuxlGameController.prototype.solutionManagerEvent = function solutionManagerEvent(e) {
    e.stopPropagation();
    e.preventDefault();

    let randomvalues = new Uint32Array(1);
    let unsolved = this.model.unsolved.slice();
    let selectedLetters = this.model.selectedLetters;
    window.crypto.getRandomValues(randomvalues);

    let nextValue = this.model.unsolved[randomvalues % unsolved.length][0];

    let freeze = false;

    for (let j = 0; j < selectedLetters.length; j++) {
        for (let i = 0; i < unsolved.length; i++) {
            let curLetter = this.model.getLetterById(selectedLetters[j]);
            if (curLetter.match(unsolved[i][j])) {
                if (!freeze) nextValue = unsolved[i][j + 1];
            } else if (curLetter.match('_')) {
                if (!freeze) {
                    freeze = true;
                    nextValue = unsolved[i][j];
                }
                break;
            } else {
                unsolved.splice(i, 1);
                j--;
                break;
            }
        }
    }

    if (unsolved.length === 0) {
        this.view.animateHintError();
    } else {
        let letterHashes = this.model.getHashesByLetter(nextValue);
        this.view.animateHint(letterHashes.selectedLetter);
    }
};

BuxlGameController.prototype.createNewRandomGame = function createNewRandomGame() {
    let randomvalues = new Uint32Array(1);
    let datalength = this.model.getBuxlsCount();
    window.crypto.getRandomValues(randomvalues);

    let currentGameHash = randomvalues % datalength;
    this.model.setCurrentBuxlById(currentGameHash);
};

BuxlGameController.prototype.route = function route(route, gameHash) {
    if (gameHash) {
        if (this.model.setCurrentBuxl(gameHash)) this.view.render(this.model.getCurrentBuxl(), true);else this.view.routeTo("buxl", null);
    } else {
        this.createNewRandomGame();
        this.view.animateGameReload(this.model.getCurrentBuxl());
    }
};

BuxlGameController.prototype.register = function register(buxlView, buxlModel) {
    BuxlControllerPrototype.prototype.register.call(this, buxlView, buxlModel);

    this.events.onSelectLetterEvent = this.onSelectLetterEvent;
    this.events.onKeyPressLetterEvent = this.onKeyPressLetterEvent;
    this.events.onClickSolutionEvent = this.solutionManagerEvent;
};
let BuxlIntroController = function BuxlIntroController() {
    BuxlControllerPrototype.call(this);
};

BuxlIntroController.prototype = Object.create(BuxlControllerPrototype.prototype);

BuxlIntroController.prototype.onLogoClickEvent = function onLogoClickEvent(e) {
    this.view.animateLogo();
};

BuxlIntroController.prototype.register = function register(buxlView, buxlModel) {
    BuxlControllerPrototype.prototype.register.call(this, buxlView, buxlModel);
    this.events.onLogoClickEvent = this.onLogoClickEvent;
};

BuxlIntroController.prototype.init = function init(callback) {
    BuxlControllerPrototype.prototype.init.call(this);
    this.view.render(callback, true);
};
let BuxlListController = function BuxlListController() {
    BuxlControllerPrototype.call(this);
};

BuxlListController.prototype = Object.create(BuxlControllerPrototype.prototype);

BuxlListController.prototype.route = function route(route, gameHash) {
    let favs = this.model.getFavoritesList();
    this.view.render(favs, false);
};

BuxlListController.prototype.register = function register(buxlView, buxlModel) {
    BuxlControllerPrototype.prototype.register.call(this, buxlView, buxlModel);
};

BuxlListController.prototype.init = function init(callback) {
    BuxlControllerPrototype.prototype.init.call(this);
};
let BuxlNavigationController = function BuxlNavigationController() {
    BuxlControllerPrototype.call(this);
    this.currentGameHash = null;
};

BuxlNavigationController.prototype = Object.create(BuxlControllerPrototype.prototype);

BuxlNavigationController.prototype.triggerAction = function triggerAction(trigger, gameHash) {
    switch (true) {
        case trigger.contains("shuffle"):
            this.view.routeTo("buxl", null);
            return true;
        case trigger.contains("listFavorites"):
            this.view.routeTo("favorites", "list");
            return true;
        case trigger.contains("favorite"):
            this.toggleFavorite(gameHash);
            return true;
        case trigger.contains("playBuxl"):
            this.view.routeTo("buxl", gameHash);
            return true;
        case trigger.contains("showSolutions"):
            this.view.showSolutions(gameHash);
            return true;
        case trigger.contains("goBack"):
            this.view.goBack();
            return true;
    }

    return false;
};

BuxlNavigationController.prototype.onNavigationClickEvent = function onNavigationClickEvent(e) {
    e.stopImmediatePropagation();
    e.stopPropagation();
    e.preventDefault();

    if (!e.target) return;

    let gameHash = e.currentTarget.dataset.gameHash;

    if (e.target.parentElement && this.triggerAction(e.target.parentElement.classList, gameHash)) return;else if (e.target.firstElementChild && this.triggerAction(e.target.firstElementChild.classList, gameHash)) return;else return;
};

BuxlNavigationController.prototype.toggleFavorite = function toggleFavorite(gameHash) {
    if (!gameHash) return;

    let isFavorite = this.model.toggleFavorite(gameHash);

    this.model.mergeUnsavedFavorites();
    this.model.saveFavorites();

    let dataModel = { "isFavorite": isFavorite,
        "route": this.currentRoute,
        "gameHash": gameHash
    };

    this.view.toggleFavorite(dataModel);
};

BuxlNavigationController.prototype.route = function route(route, gameHash) {
    this.currentRoute = route;

    if (route === "buxl" && gameHash) {
        let isFavorite = this.model.isFavorite(gameHash);
        this.view.render({ "isFavorite": isFavorite,
            "route": route,
            "gameHash": gameHash
        }, true);
    } else if (route === "favorites") {
        this.view.clearRender();
        this.view.registerEvents(true);
    }
};

BuxlNavigationController.prototype.register = function register(buxlView, buxlModel) {
    this.events.onNavigationClickEvent = this.onNavigationClickEvent;
    this.renders = [];

    BuxlControllerPrototype.prototype.register.call(this, buxlView, buxlModel);
};

BuxlNavigationController.prototype.init = function init(callback) {
    BuxlControllerPrototype.prototype.init.call(this);
    this.model.loadFavorites();
};
let BuxlRoutingController = function BuxlRoutingController() {
    this.controllers = {};
    this.routes = {};
    this.events = {};

    let viewEvents = [];

    viewEvents.push({
        target: "window",
        triggers: "hashchange hiddenroute",
        f: "doRouting"
    });

    this.view = new BuxlRoutingView({
        'targetView': null,
        'targetTemplate': null,
        'events': viewEvents
    });

    this.events.doRouting = this.doRouting;
    this.view.linkEventsToController(this);
};

BuxlRoutingController.prototype = Object.create(BuxlControllerPrototype.prototype);

BuxlRoutingController.prototype.register = function register(title, view, model) {
    if (title) {
        let controller = this.controllers[title];
        controller.register(view, model);
    }
};

BuxlRoutingController.prototype.doRouting = function doRouting(e) {
    let route = null;

    if (e) {
        e.stopImmediatePropagation();
        if (e.detail) route = e.detail;
    }

    if (!route) route = window.location.hash;

    route = route.substring(2).split('/');

    this.route(route[0], route[1]);
};

BuxlRoutingController.prototype.route = function route(route, gameHash) {
    if (route === "") {
        this.routeDefault();
        return;
    }

    let currentRoute = this.routes[route];
    let successRoute = false;

    this.unregisterEvents();

    for (let i = 0; i < currentRoute.length; i++) {
        if (currentRoute[i]) {
            successRoute = true;
            currentRoute[i].route(route, gameHash);
        }
    }

    if (!successRoute) this.routeDefault();
};

BuxlRoutingController.prototype.routeDefault = function routeDefault() {
    this.view.routeTo("buxl", null);
};

BuxlRoutingController.prototype.registerRoutes = function registerRoutes() {
    this.controllers.buxlgame = new BuxlGameController();
    this.controllers.intro = new BuxlIntroController();
    this.controllers.navbar = new BuxlNavigationController();
    this.controllers.list = new BuxlListController();

    this.routes.buxl = [];
    this.routes.buxl.push(this.controllers.buxlgame);
    this.routes.buxl.push(this.controllers.navbar);

    this.routes.favorites = [];
    this.routes.favorites.push(this.controllers.list);
    this.routes.favorites.push(this.controllers.navbar);
};

BuxlRoutingController.prototype.unregisterEvents = function unregisterEvents() {
    for (let controller in this.controllers) this.controllers[controller].view.registerEvents(false);
};

BuxlRoutingController.prototype.init = function init() {
    for (let controller in this.controllers) this.controllers[controller].init(this.doRouting.bind(this));

    this.view.registerEvents(true);
};
let getBuxlGameEvents = function getBuxlGameEvents() {
    let events = [];

    // Register Buttons
    let letterButtons = {
        target: ".letter-mass",
        triggers: "click touchend",
        f: "onSelectLetterEvent"
    };

    let letterKeyPress = {
        target: "body",
        triggers: "keypress",
        f: "onKeyPressLetterEvent"
    };

    let solutionButton = {
        target: "#help",
        triggers: "click touchend",
        f: "onClickSolutionEvent"
    };

    events.push(letterButtons);
    events.push(letterKeyPress);
    events.push(solutionButton);

    return events;
};

let getBuxlNavigationEvents = function getBuxlNavigationEvents() {
    let events = [];

    let navigationButtons = {
        target: ".navbar",
        triggers: "click touchend",
        f: "onNavigationClickEvent"
    };

    events.push(navigationButtons);

    return events;
};

let getBuxlIntroEvents = function getBuxlIntroEvents() {
    let events = [];

    let Logo = {
        target: "#svg2",
        triggers: "click touchend",
        f: "onLogoClickEvent"
    };

    events.push(Logo);

    return events;
};

document.addEventListener('DOMContentLoaded', function () {
    let controller = new BuxlRoutingController();
    controller.registerRoutes();

    let buxlGameModel = new BuxlGameModel(data);
    let buxlFavoritesModel = new BuxlFavoritesModel();
    let buxlListModel = new BuxlListModel({
        "buxlGameModel": buxlGameModel,
        "buxlFavoritesModel": buxlFavoritesModel
    });

    let buxlGameViewTmpls = [];
    buxlGameViewTmpls.push("buxlstmpl");
    buxlGameViewTmpls.push("solutionstmpl");

    let buxlListViewTmpls = [];
    buxlListViewTmpls.push("buxlstmpl");
    buxlListViewTmpls.push("navtmpl");
    buxlListViewTmpls.push("solutionstmpl");

    let buxlGameView = new BuxlGameView({
        'targetView': "content",
        'targetTemplate': "gametmpl",
        'templates': buxlGameViewTmpls,
        'events': getBuxlGameEvents()
    });

    let buxlListView = new BuxlListView({
        'targetView': "content",
        'targetTemplate': "buxlslisttmpl",
        'templates': buxlListViewTmpls
    });

    let buxlNavigationView = new BuxlNavigationView({
        'targetView': "navigation",
        'targetTemplate': "navtmpl",
        'events': getBuxlNavigationEvents()
    });

    let buxlIntroView = new BuxlIntroView({
        'targetView': "footer",
        'targetTemplate': "footertmpl",
        'events': getBuxlIntroEvents()
    });

    controller.register("intro", buxlIntroView, null);
    controller.register("buxlgame", buxlGameView, buxlGameModel);
    controller.register("navbar", buxlNavigationView, buxlFavoritesModel);
    controller.register("list", buxlListView, buxlListModel);

    // Gradient Bug Fix
    let isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);

    if (!isChrome) {
        let root = document.getElementsByTagName('html')[0]; // '0' to assign the first (and only `HTML` tag)
        if (root) root.setAttribute('class', 'not-chrome');
    }

    controller.init();
});

